name: Deploy website
on:
  push:
    branches:
      - master
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
        #Caching is used so that we don't have to install dependencies multiple times
        #in seperate jobs, as it increases our workflow run time
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm #if this folder exist then npm ci checks this, if it doesn't then npm ci runs
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}} #we are hashing package-lock file because if any package is changed then it is reflected in package-lock and so the hash of the file will change, this will tell github actions to delete the cache and install dependencies again
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{steps.publish.outputs.script_file}} #after output that name will come which we want to publish
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache
        uses: actions/cache@v3
        with:
          path: ~/.npm #build job will use the same cache as it is alloted centrally
          key: deps-node-modules-${{hashFiles('**/package-lock.json')}}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS Filename #getting JS file name generated in build step so that we can use that in deploy job
        id: publish #to differentiate this step from other steps we give it a ID
        run: find dist/assets/*.js -type f -execdir echo 'script_file={}' >> $GITHUB_OUTPUT ';' #we are storing output in script_file variable
        # find dist/assets/*.js -type f -execdir echo '{}' ';' THIS IS LINUX COMMAND FOR DISPLAYING FILE NAME
        #artifacts
      - name: Uploading artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: dist
          # path: | #storing artifacts in path
          #   dist
          #   package.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # getting the artifacts generated in build step
      - name: Get build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist-files
      - name: Output contents
        run: ls
      - name: Output filename
        run: echo "${{needs.build.outputs.script-file}}" #accessing file name from other job
      - name: Deploy
        run: echo "Deploying..."
